# ---------------------------------------------------
# Name: Raquib Khan Lavani
# ID: 1622108
# CMPUT 274 , Fall 2020
#
# Weekly Exercise #2: Unfair Dice
# ---------------------------------------------------

import random


def biased_rolls(prob_list, s, n):
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results.

    Arguments:
        prob_list: a list of the probabilities of rolling the
                   number on each side of the m-sided die. The list
                   will always have the length m (m >= 2), where m is
                   the number of sides numbered 1 to m. Therefore,
                   for example, the probability stored at index 0 in
                   the list is the probability of rolling a 1 on
                   the m-sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return:
        rolls: a list (of length n) containing each of the n rolls of the
               biased die, in the order they were generated.
    """
    # Setting random seed to the seed specified
    random.seed(a=s, version=2)
    # Setting sidenum as a list which contains all the sides of the dice
    sidenum = list(range(0, len(prob_list)))
    # Setting rolls as an empty list; inserting 0 at the beginning of prob_list
    rolls = list()
    prob_list.insert(0, 0)
    # Setting m as a global variable which has the largest side of die
    global m
    m = len(prob_list)

    # Setting a loop to do the toss 'n' number of times
    for attempt in list(range(n)):
        x = 0
        y = 0
        randchoice = random.random()
        # Nested loop which make 'x' and 'y' intervals according to prob_list;
        # then checking if the random choice lies within [x,y)
        # If it does, appending associated die number to 'rolls' list
        for num in sidenum:
            x = y
            y = prob_list[num+1] + x
            if x <= randchoice < y:
                rolls.append(num+1)

    # return the resulting rolls
    return rolls


def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.

    Arguments:
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram, in characters
                     (this is the length of the longest bar in the
                     histogram, to maximize space in the chart)

    Returns:
        None (but prints the histogram to standard output)
    """
    # Declaring count, print
    count = [0]*m
    printer = [0]*m

    # Makes a list with all the sides of the die
    for n in range(len(printer)):
        printer[n] = str(n+1)+'.'

    # Adds 1 to a corresponding element in 'count' when a number is matched
    for i in range(1, m+1):
        for num in rolls:
            if i == num:
                count[i-1] += 1

    # Scaling count with reference to the maximum width
    count = [round(i*(width/max(count))) for i in count]

    # Printing '#' for the scaled frequency of
    # the number in the corresponding element in 'printer'
    for n in range(m):
        printer[n] += '#' * count[n]

    # Prints title with number of sides of the die
    print('Frequency Histogram: ' + str(m) + '-sided Die')

    # Adds hyphens if the number does not occur at max scaled width
    for n in range(len(printer)):
        if count[n] != width:
            printer[n] += ('-' * (width - count[n]))
        # Prints the final output
        print(printer[n])


if __name__ == "__main__":

    pass
